/* Copyright (C) 2010-2019, The Regents of The University of Michigan.
 All rights reserved.

 This software was developed as part of the The Vulcan project in the Intelligent Robotics Lab
 under the direction of Benjamin Kuipers, kuipers@umich.edu. Use of this code is governed by an
 MIT-style License that can be found at "https://github.com/h2ssh/Vulcan".
*/


/**
 * \file     target.h
 * \author   Collin Johnson
 *
 * Declaration of LocalTopoExplorationTarget interface.
 */

#ifndef PLANNER_EXPLORATION_LOCAL_TOPO_TARGET_H
#define PLANNER_EXPLORATION_LOCAL_TOPO_TARGET_H

#include "math/geometry/polygon.h"
#include "mpepc/metric_planner/task/navigation.h"

namespace vulcan
{
namespace hssh
{
class LocalAreaEvent;
}
struct pose_t;
namespace planner
{

/**
 * LocalTopoExplorationTarget defines the interface for different types of exploration targets within the local topology
 * of the environment. Each target has a boundary in the environment (for visualization support) and a method to check
 * if the target was visited during a topological event.
 */
class LocalTopoExplorationTarget
{
public:
    /**
     * wasVisited sees if checkVisited has ever been true for this target.
     */
    virtual bool wasVisited(void) const = 0;

    /**
     * checkVisited checks if the target was visited based on a LocalAreaEvent fired during exploration of the
     * environment.
     *
     * \param    event           Event generated by local_topo_hssh
     * \return   True if the target was visited during the event that was generated.
     */
    virtual bool checkVisited(const hssh::LocalAreaEvent& event) = 0;

    /**
     * explorationTask retrieves the task that must be performed to ensure this target is explored.
     *
     * The task is likely to be fixed for a given target, but if it is pose-dependent, then the provided pose is the
     * current estimate of the robot pose in the environment.
     *
     * \param    pose            Current pose of the robot
     * \return   Task to execute to move the robot to the target.
     */
    virtual std::shared_ptr<mpepc::NavigationTask> explorationTask(const pose_t& pose) const = 0;

    /**
     * boundary retrieves the polygon boundary of the exploration target.
     *
     * \return   Boundary approximation of the target as a convex polygon.
     */
    virtual math::Polygon<float> boundary(void) const = 0;

    virtual ~LocalTopoExplorationTarget(void) { }
};

}   // namespace planner
}   // namespace vulcan

#endif   // PLANNER_EXPLORATION_LOCAL_TOPO_TARGET_H
