/* Copyright (C) 2010-2019, The Regents of The University of Michigan.
 All rights reserved.

 This software was developed as part of the The Vulcan project in the Intelligent Robotics Lab
 under the direction of Benjamin Kuipers, kuipers@umich.edu. Use of this code is governed by an
 MIT-style License that can be found at "https://github.com/h2ssh/Vulcan".
*/


/**
 * \file     heat_map.h
 * \author   Collin Johnson
 *
 * Declaration of LocalTopoHeatMap and HeatMapStatistics.
 */


#ifndef HSSH_LOCAL_TOPOLOGICAL_EVALUATION_HEAT_MAP_H
#define HSSH_LOCAL_TOPOLOGICAL_EVALUATION_HEAT_MAP_H

#include "hssh/local_topological/local_topo_graph.h"
#include "hssh/local_topological/local_topo_map.h"
#include "hssh/types.h"

namespace vulcan
{
namespace hssh
{

/**
 * HeatMapStatistics
 */
struct HeatMapStatistics
{
    std::unordered_map<int, int> areaVisitCount;
    std::vector<LocalTopoRoute> paths;
};

/**
 * LocalTopoHeatMap creates a heat map for a set of LocalTopoMaps. Each map must represent the same LPM. One
 * map is assigned to be the ground-truth map against which all other maps are compared.
 *
 * The heatmap is generated by sampling two points in the free space of the LPM. A path is found between these points in
 * each of the provided map. Using these paths, the following statistics can be calculated:
 *
 *   - Conciseness : average length of a path in the map
 *
 */
class LocalTopoHeatMap
{
public:
    /**
     * Constructor for LocalTopoHeatMap.
     *
     * \param    groundTruth         Ground truth map for the environment
     * \param    labeled             Automatically labeled map of the environment
     */
    LocalTopoHeatMap(const LocalTopoMap& groundTruth, const LocalTopoMap& labeled);

    /**
     * Constructor for LocalTopoHeatMap.
     *
     * Create a heat map using a single LocalTopoMap. Useful for visualization, but not comparison.
     *
     * \param    labeled             Automatically labeled map of the environment
     */
    LocalTopoHeatMap(const LocalTopoMap& labeled);

    /**
     * generatePaths generates the specified number of random routes in the environment.
     *
     * \param    numPaths           Number of routes to generate
     */
    void generatePaths(int numPaths);

    /**
     * groundTruthStats retrieves the ground-truth statistics for the heat map so far.
     */
    const HeatMapStatistics& groundTruthStats(void) const { return groundTruthStats_; }

    /**
     * labeledStats retrieves the labeled area statistics for the heat map so far.
     */
    const HeatMapStatistics& labeledStats(void) const { return labeledStats_; }

private:
    using ExtentToAreaMap = std::unordered_map<cell_t, int, PointHash<double>>;

    LocalTopoGraph groundTruthGraph_;
    LocalTopoGraph labeledGraph_;

    LocalTopoMap groundTruthMap_;
    LocalTopoMap labeledMap_;

    CellVector freeCells_;
    ExtentToAreaMap cellToGroundTruthArea_;
    ExtentToAreaMap cellToLabeledArea_;

    HeatMapStatistics groundTruthStats_;
    HeatMapStatistics labeledStats_;

    bool haveGroundTruth_;


    void associateAreasWithCells(const LocalTopoMap& map, ExtentToAreaMap& cellsToAreas);
};

}   // namespace hssh
}   // namespace vulcan

#endif   // HSSH_LOCAL_TOPOLOGICAL_EVALUATION_HEAT_MAP_H
